# -*- coding: utf-8 -*-
"""party-scaling-file.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z6kbNbCmk0J9W8S8f87LB80e4fOl3LxM
"""

#from google.colab import drive
#drive.mount('/content/drive', force_remount = True)

import pandas as pd
from statistics import median
import os
import numpy as np
from collections import Counter
import glob
from io_helper import get_csv_lines
from io_helper import serialize
from datetime import datetime
from io_helper import write_list
from io_helper import write_csv_lines

base_path = "/ceph/sobaidul/data/party_scaling/scaling_party"
file_path = "/ceph/sobaidul/data/party_scaling"

"""# Pre-process"""


countries = ['poland']

df = pd.read_csv(f'{file_path}/{countries[0]}_corpus_clean_partyfacts.csv', sep=',')

df = df[df['partyfacts'].notna()]
df.to_csv(f'{file_path}/{countries[0]}.csv', sep=',', index=False)


"""# Splitting Code"""

indices = {"belgium" : {"date" : df.columns.get_loc("date"), "text" : df.columns.get_loc("text"), "policyarea" : df.columns.get_loc("policyarea"), "partyfacts" : df.columns.get_loc("partyfacts")},
           "austria" : {"date" : df.columns.get_loc("date"), "text" : df.columns.get_loc("text"), "policyarea" : df.columns.get_loc("policyarea"), "partyfacts" : df.columns.get_loc("partyfacts")},
           "croatia" : {"date" : df.columns.get_loc("date"), "text" : df.columns.get_loc("text"), "policyarea" : df.columns.get_loc("policyarea"), "partyfacts" : df.columns.get_loc("partyfacts")},
           "cyprus" : {"date" : df.columns.get_loc("date"), "text" : df.columns.get_loc("text"), "policyarea" : df.columns.get_loc("policyarea"), "partyfacts" : df.columns.get_loc("partyfacts")},
           "finland" : {"date" : df.columns.get_loc("date"), "text" : df.columns.get_loc("text"), "policyarea" : df.columns.get_loc("policyarea"), "partyfacts" : df.columns.get_loc("partyfacts")},
           "sweden" : {"date" : df.columns.get_loc("date"), "text" : df.columns.get_loc("text"), "policyarea" : df.columns.get_loc("policyarea"), "partyfacts" : df.columns.get_loc("partyfacts")},
           "estonia" : {"date" : df.columns.get_loc("date"), "text" : df.columns.get_loc("text"), "policyarea" : df.columns.get_loc("policyarea"), "partyfacts" : df.columns.get_loc("partyfacts")},
           "denmark" : {"date" : df.columns.get_loc("date"), "text" : df.columns.get_loc("text"), "policyarea" : df.columns.get_loc("policyarea"), "partyfacts" : df.columns.get_loc("partyfacts")},
           "germany" : {"date" : df.columns.get_loc("date"), "text" : df.columns.get_loc("text"), "policyarea" : df.columns.get_loc("policyarea"), "partyfacts" : df.columns.get_loc("partyfacts")},
           "italy" : {"date" : df.columns.get_loc("date"), "text" : df.columns.get_loc("text"), "policyarea" : df.columns.get_loc("policyarea"), "partyfacts" : df.columns.get_loc("partyfacts")},
           "ireland" : {"date" : df.columns.get_loc("date"), "text" : df.columns.get_loc("text"), "policyarea" : df.columns.get_loc("policyarea"), "partyfacts" : df.columns.get_loc("partyfacts")},
           "hungary" : {"date" : df.columns.get_loc("date"), "text" : df.columns.get_loc("text"), "policyarea" : df.columns.get_loc("policyarea"), "partyfacts" : df.columns.get_loc("partyfacts")},
           "portugal" : {"date" : df.columns.get_loc("date"), "text" : df.columns.get_loc("text"), "policyarea" : df.columns.get_loc("policyarea"), "partyfacts" : df.columns.get_loc("partyfacts")},
           "spain" : {"date" : df.columns.get_loc("date"), "text" : df.columns.get_loc("text"), "policyarea" : df.columns.get_loc("policyarea"), "partyfacts" : df.columns.get_loc("partyfacts")},
           "slovakia" : {"date" : df.columns.get_loc("date"), "text" : df.columns.get_loc("text"), "policyarea" : df.columns.get_loc("policyarea"), "partyfacts" : df.columns.get_loc("partyfacts")},
           "france" : {"date" : df.columns.get_loc("date"), "text" : df.columns.get_loc("text"), "policyarea" : df.columns.get_loc("policyarea"), "partyfacts" : df.columns.get_loc("partyfacts")},
           "netherlands" : {"date" : df.columns.get_loc("date"), "text" : df.columns.get_loc("text"), "policyarea" : df.columns.get_loc("policyarea"), "partyfacts" : df.columns.get_loc("partyfacts")},
           "romania" : {"date" : df.columns.get_loc("date"), "text" : df.columns.get_loc("text"), "policyarea" : df.columns.get_loc("policyarea"), "partyfacts" : df.columns.get_loc("partyfacts")},
           "greece" : {"date" : df.columns.get_loc("date"), "text" : df.columns.get_loc("text"), "policyarea" : df.columns.get_loc("policyarea"), "partyfacts" : df.columns.get_loc("partyfacts")},
           "czechia" : {"date" : df.columns.get_loc("date"), "text" : df.columns.get_loc("text"), "policyarea" : df.columns.get_loc("policyarea"), "partyfacts" : df.columns.get_loc("partyfacts")},
           "malta" : {"date" : df.columns.get_loc("date"), "text" : df.columns.get_loc("text"), "policyarea" : df.columns.get_loc("policyarea"), "partyfacts" : df.columns.get_loc("partyfacts")},
           "slovenia" : {"date" : df.columns.get_loc("date"), "text" : df.columns.get_loc("text"), "policyarea" : df.columns.get_loc("policyarea"), "partyfacts" : df.columns.get_loc("partyfacts")},
           "latvia" : {"date" : df.columns.get_loc("date"), "text" : df.columns.get_loc("text"), "policyarea" : df.columns.get_loc("policyarea"), "partyfacts" : df.columns.get_loc("partyfacts")},
           "poland" : {"date" : df.columns.get_loc("date"), "text" : df.columns.get_loc("text"), "policyarea" : df.columns.get_loc("policyarea"), "partyfacts" : df.columns.get_loc("partyfacts")},
           "lithuania": {"date" : df.columns.get_loc("date"), "text" : df.columns.get_loc("text"), "policyarea" : df.columns.get_loc("policyarea"), "partyfacts" : df.columns.get_loc("partyfacts")},
           "bulgaria": {"date" : df.columns.get_loc("date"), "text" : df.columns.get_loc("text"), "policyarea" : df.columns.get_loc("policyarea"), "partyfacts" : df.columns.get_loc("partyfacts")},
           "norway": {"date" : df.columns.get_loc("date"), "text" : df.columns.get_loc("text"), "policyarea" : df.columns.get_loc("policyarea"), "partyfacts" : df.columns.get_loc("partyfacts")},
           "united_kingdom": {"date" : df.columns.get_loc("date"), "text" : df.columns.get_loc("text"), "policyarea" : df.columns.get_loc("policyarea"), "partyfacts" : df.columns.get_loc("partyfacts")}
          }

def match_and_add_column(path1, path2, colmatch1, colmatch2, addcol2):
    lines1 = get_csv_lines(path1)
    lines2 = {l[colmatch2] : l[addcol2] for l in get_csv_lines(path2)[1:]}

    nls = [lines1[0] + ["em_party"]]
    for l in lines1[1:]:
        if l[colmatch1] in lines2:
            if lines2[l[colmatch1]].strip() == "NA":
                i = 7
            nls.append(l + ["" if lines2[l[colmatch1]].strip() == "NA" else lines2[l[colmatch1]]])
        else:
            l = l + [""]

    return nls

def try_parsing_date(text):
    for fmt in ('%Y-%m-%d', '%d.%m.%Y', '%d/%m/%Y'):
        try:
            return datetime.strptime(text, fmt)
        except ValueError:
            pass
    raise ValueError('no valid date format found ' + text)


for country in countries:
  lines = get_csv_lines(os.path.join(file_path, country + ".csv"))[1:]
  aggs = {}
  periods = {l[2] : (datetime.strptime(l[3], '%Y-%m-%d'), datetime.strptime(l[4], '%Y-%m-%d')) for l in get_csv_lines(os.path.join(base_path, "periods.csv"))[1:] if l[0].strip().lower().replace(" ", "_") == country}


  #if not os.path.isfile(os.path.join(base_path, country + "_party_clean.csv")):
  #    raise argparse.ArgumentError("Input CSV file does not exist")



  cnt = 0
  print(len(lines))
  found_cmp = False

  for l in lines:
    try:
      if len(l) < 12:
          continue

      cnt += 1
      if cnt % 100000 == 0:
          print(cnt)
      cmp = l[indices[country]["partyfacts"]].replace('.0','')
      date = try_parsing_date(l[indices[country]["date"]].replace("\"", ""))
      per = [p for p in periods if periods[p][0] <= date and periods[p][1] >= date]
      #ep_np = l[indices[country]["EP"]]
      if len(per) > 0:
          period = per[0]
          if period not in aggs:
              aggs[period] = {}

          polarea = l[indices[country]["policyarea"]]
          if polarea not in aggs[period]:
              aggs[period][polarea] = {}

          #speaker = l[indices[country]["speaker"]].replace("\"", "")
          #ep = l[indices[country]["EP"]]
          party = l[indices[country]["partyfacts"]].replace("\"", "")
          party = (party.replace("/", "-"))

          spp = party

          if spp not in aggs[period][polarea]:
              aggs[period][polarea][spp] = []

          text = l[indices[country]["text"]]
          aggs[period][polarea][spp].append(text)
    except Exception as e:
      print('Exception: ' + str(e))
      print('Count: ' + str(cnt))

  for period in aggs:
    print(period)
    country_dir = os.path.join(base_path,country)
    if not os.path.exists(country_dir):
        os.mkdir(country_dir)
    per_dir = os.path.join(base_path, country, period.replace(" ", "_").lower())
    if not os.path.exists(per_dir):
        os.mkdir(per_dir)

    for pol_area in aggs[period]:
        pa_dir = os.path.join(per_dir, pol_area, "input_files")
        if not os.path.exists(pa_dir):
            os.makedirs(pa_dir)

        for party in aggs[period][pol_area]:
            text = " ".join(aggs[period][pol_area][party])
            out_path = os.path.join(pa_dir, party.replace(" ", "_").replace(".0", "").lower() + ".txt")
            try:
                write_list(out_path, [text])
            except Exception as e:
                print("Exception: " + str(e))
                print("Period: " + str(period))
                print("Speaker: " + str(spp))